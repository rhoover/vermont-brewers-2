'use strict';

angular.module('vbaV2App', ['ngAnimate', 'ngTouch']);
'use strict';

angular.module('vbaV2App')
    .factory('memberjson', ['$http', function ($http) {

        //below pattern is v1.2 with promises. yes!
        return {
            getMemberData: function () {
                return $http.get('http://www.vermontbrewers.com/wp-content/themes/vbav2/data/vbamembership.json').then(function (result) {
                    return result.data;
                });
            }
        }
    }]);

'use strict';

// inspired by both:
// http://shahjadatalukdar.wordpress.com/2013/09/27/using-html5-localstorage-with-angularjs/
// http://jsfiddle.net/agrublev/QjVq3/

angular.module('vbaV2App')
    .factory('storageService', [function () {

        // Public API here
        return {
            get: function (key) {
                var value = sessionStorage.getItem(key);
                var parseMe = angular.fromJson(value);
                return parseMe;
            },
            save: function (key, data) {
                var storeMe = angular.toJson(data);
                sessionStorage.setItem(key, storeMe);
            }
            // remove: function (key) {
            //     sessionStorage.removeItem(key);
            // },
            // clearAll: function () {
            //     sessionStorage.clear();
            // }
        };
    }]);

'use strict';

angular.module('vbaV2App')
    .service('googleMap', [function () {

        return {
            mapOptions: function (zoom, lat, lon) {
                var mapOptionsStuff;
                mapOptionsStuff = {
                    zoom: zoom,
                    center: new google.maps.LatLng(lat, lon),
                    mapTypeControl: true,
                    mapTypeControlOptions: {
                        style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
                    },
                    zoomControl: true,
                    streetViewControl: false,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                };
                return mapOptionsStuff;
            },
            mapCreator: function (div, myMapOptions) {
                var mapCreatorStuff;
                mapCreatorStuff = new google.maps.Map(div, myMapOptions);
                return mapCreatorStuff;
            },
            mapMarker: function (map, lat, lon) {
                var markerStuff;
                markerStuff = new google.maps.Marker ({
                    position: new google.maps.LatLng(lat, lon),
                    map: map
                });
                return markerStuff;
            },
            infoWindowCreator: function (infoContent) {
                var infoWindowStuff;
                infoWindowStuff = new google.maps.InfoWindow({
                    content: infoContent
                });
                return infoWindowStuff;
            },
            infoWindowClick: function (map, marker, infowindow) {
                var clickEventStuff;
                clickEventStuff = google.maps.event.addListener(marker, 'click', function () {
                    infowindow.open(map, marker);
                });
                return clickEventStuff;
            },
            infoWindowsClick: function (map, marker, infowindow, infoContent) {
                var multipleClickEventStuff;
                //Notice closure pattern, necessary for map with multiple markers
                multipleClickEventStuff = google.maps.event.addListener(marker, 'click', (function (marker, infoContent) {
                        return function () {
                            infowindow.setContent(infoContent);
                            infowindow.open(map, marker);
                        }
                    })(marker, infoContent));
                return multipleClickEventStuff;
            }
        };
    }]);

'use strict';

angular.module('vbaV2App')
    .filter('memberdata', [function () {

        return {
            member: function (input, arg) { //input is membership json, arg1 is member.selector
                var outMember = [];
                for (var i=0; i<input.length; i++) {
                    if (input[i].selector === arg) {
                        outMember.push(input[i]);
                        return outMember[0];
                    };
                }
            }
        } //end return
    }]);

'use strict';

angular.module('vbaV2App')
    .controller('MemberListCtrl', ['$scope', 'memberjson', 'storageService', function ($scope, memberjson, storageService) {

        $scope.$emit('LOADING');

        //see if we have been here before
        var membershipCache = storageService.get('vba-membership-cache');

        //if we have...
        if (membershipCache != null) {
            $scope.memberList = membershipCache;

            $scope.$emit('LOADED');
        } else {

            //apparently we have not been here, so...

            //below pattern is for a service that returns a promise
            memberjson.getMemberData().then(function (data) {

                $scope.memberList = data;

                $scope.$emit('LOADED');

                storageService.save('vba-membership-cache', data);

            });
        }; //end if-else

    }]);

'use strict';

angular.module('vbaV2App')
    .controller('MemberPageCtrl', ['$scope', '$attrs', 'memberjson', 'storageService', 'memberdataFilter', function ($scope, $attrs, memberjson, storageService, memberdataFilter) {

        $scope.$emit('LOADING');

        //see if we have been here before
        var membershipCache = storageService.get('vba-membership-cache');

        //if we have...
        if (membershipCache != null) {
            $scope.member = memberdataFilter.member(membershipCache, $attrs.member);

            $scope.$emit('LOADED');
        } else {

            //apparently we have not been here, so...

            //below pattern is for a service that returns a promise
            memberjson.getMemberData().then(function (data) {

                $scope.member = memberdataFilter.member(data, $attrs.member);

                $scope.$emit('LOADED');

                storageService.save('vba-membership-cache', data);

            });
        }; //end if-else

    }]);

'use strict';

angular.module('vbaV2App')
  .controller('MembershipMapCtrl', ['$scope', 'memberjson', 'storageService', function ($scope, memberjson, storageService) {

        $scope.$emit('LOADING');

        //see if we have been here before
        var membershipCache = storageService.get('vba-membership-cache');

        //if we have...
        if (membershipCache != null) {
            $scope.members = membershipCache;

            $scope.$emit('LOADED');
        } else {

            //apparently we have not been here, so...

            //below pattern is for a service that returns a promise
            memberjson.getMemberData().then(function (data) {

                //pass off the heavy lifting to the filter
                // $scope.member = appdataFilter(data, memberSelector);

                $scope.$emit('LOADED');
                $scope.members = data;

                storageService.save('vba-membership-cache', data);
                console.log('JSON Stored');

            });
        }; //end if-else
  }]);

'use strict';

angular.module('vbaV2App')
    .directive('bannerImage', [function () {
        return {
            restrict: 'A',
            compile: function (tElement, tAttributes, transclude) {
                return function (scope, element, attrs) {
                    //Responsive Image Solution
                    //Inspired by: http://tech.particulate.me/javascript/2013/10/10/how-to-conveniently-check-for-responsive-breakpoints-in-javascript/
                    var result = getComputedStyle(element[0], ':after').content;
                    result = result.replace(/"/g,''); //Because Firefox keeps quotes from .content
                    switch (result) {
                        case "phone" :
                            element.addClass("bg-phone");
                        break;
                        case "tablet" :
                            element.addClass("bg-tablet");
                        break;
                        case "computer" :
                            element.addClass("bg-computer");
                        break;
                    }
                } //end return function
            } //end compile
        };//end return
    }]);
'use strict';

angular.module('vbaV2App')
  .directive('backButton', [function () {
    return {
        restrict: 'A',
        link: function (scope, element, attrs) {
            element.bind('click', goBack);
            function goBack() {
                history.back();
                scope.$apply();
            };
        } //end link function
    }; //end return
  }]);

'use strict';

angular.module('vbaV2App')
    .directive('showSocial', [function () {

    return {
        restrict: 'A',
        link: function (scope, element, attrs) {

            if (!attrs.href) {
                element.addClass('social-noshow');
            };
        }
    };
}]);
'use strict';

angular.module('vbaV2App')
    .directive('memberpageMap', ['$timeout', 'googleMap', function ($timeout, googleMap) {

        return {
            restrict: 'A',
            compile: function (tElement, tAttributes, transclude) {
                return function (scope, element, attrs) {

                    $timeout(function () {

                        var lat = scope.member.latitude;
                        var lon = scope.member.longitude;

                        //Map Stuff
                        var myMapOptions, map, marker, infoContent, infowindow;
                        var div = element[0];

                        myMapOptions = googleMap.mapOptions(10, lat, lon);

                        map= googleMap.mapCreator(div, myMapOptions);

                        marker = googleMap.mapMarker(map, lat, lon);

                        infoContent = '<p>'+scope.member.name+'</p>'+
                        '<p>'+scope.member.address+'</p>'+
                        '<p>'+scope.member.city+', '+scope.member.state+'</p>';

                        infowindow = googleMap.infoWindowCreator(infoContent);

                        googleMap.infoWindowClick(map, marker, infowindow);
                    }, 0); //end $timeout
                } //end return function
            } //end compile
        }; //end return
    }]);

'use strict';

angular.module('vbaV2App')
    .directive('membershippageMap', ['$interval', 'googleMap', function ($interval, googleMap) {

        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                var myMapOptions, map, marker, infoContent, infowindow, i;
                var div = element[0];
                myMapOptions = googleMap.mapOptions(7, 44.0407, -72.7093);
                map = googleMap.mapCreator(div, myMapOptions);
                var forLoop = function () {
                    for (i=0; i < scope.members.length; i++) {
                        var aml = scope.members[i];
                        marker = googleMap.mapMarker(map, aml.latitude, aml.longitude);

                        infoContent = '<p>'+aml.name+'</p>'+
                        '<p>'+aml.address+'</p>'+
                        '<p>'+aml.city+', '+aml.state+'</p>' +
                         '<a href="http://vermontbrewers.com/'+aml.selector+' ">Go To Listing</a>';

                        infowindow = googleMap.infoWindowCreator(infoContent);

                        googleMap.infoWindowsClick(map, marker, infowindow, infoContent);
                    } //end for loop
                };
                if (!scope.members) { //for landing page
                    var stop = $interval(function () {
                        if (scope.members) {
                            forLoop();
                            if (angular.isDefined(stop)) {
                                $interval.cancel(stop);
                                stop = undefined;
                            }
                        }
                    }, 200, 5);
                } else {
                    forLoop();
                }
            } // end link
        }; //end return
    }]);
